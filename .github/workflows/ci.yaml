# name of our workflow
name: Django CI/CD Workflow

# triggers for our workflow
on:
  # opening a pull request to master and develop branch will be a trigger
  pull_request:
    branches:
      #- develop
      - master
  # any code pushed to master and develop branch will also be a trigger
  push:
    branches:
      - master
      #- develop


# three job definition
jobs:
  health-check-job: # health check job for testing and code formatting check
    runs-on: ubuntu-latest # os for running the job
    services:
      postgres: # we need a postgres docker image to be booted a side car service to run the tests that needs a db
        image: postgres
        env: # the environment variable must match with app/settings.py if block of DATBASES variable otherwise test will fail due to connectivity issue.
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: github-actions
        ports:
          - 5432:5432 # exposing 5432 port for application to use
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      #redis:
      #  # Docker Hub image
      #  image: redis
    steps:
      - name: Checkout code # checking our the code at current commit that triggers the workflow
        uses: actions/checkout@v2
      - name: Cache dependency # caching dependency will make our build faster.
        uses: actions/cache@v2 # for more info checkout pip section documentation at https://github.com/actions/cache
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Setup python environment # setting python environment to 3.x
        uses: actions/setup-python@v2
        with:
          python-version: '3.10' # if you want multiple python version run just use matrix strategy in job config. See the documentation of GitHub Actions
      - name: Check Python version # checking the python version to see if 3.x is installed.
        run: python --version
      - name: Upgrade pip version
        run: pip install --upgrade pip
      - name: Install requirements # install application requirements
        run: pip install -r requirements.txt
      - name: Check Syntax # check code formatting
        run: pycodestyle --statistics --max-line-length=120 --exclude=migrations .
      - name: Run Migrations # run migrations to create table in side car db container
        working-directory: ctracker
        run: python manage.py migrate
      #- name: Run Test # running tests
      #  working-directory: ctracker
      #  run: python manage.py test

  package-job: # package job for building and publishing docker images
    runs-on: ubuntu-latest
    needs: [health-check-job] # will be fired if and only if health-check-job is passed.
    if: ${{ github.event_name == 'push' }} # will be fired if the trigger event is a push event.
    steps:
      - name: Checkout code # checking our the code at current commit that triggers the workflow
        uses: actions/checkout@v2 # Runs a single command using the runners shell
      - name: Yandex Cloud CR "Login" Action for GitHub Actions
        uses: yc-actions/yc-cr-login@v0.1-alpha
        with:
            yc-sa-json-credentials: ${{ secrets.YC_SA_JSON_CREDENTIALS }}
      - name: Build, tag, and push image to Yandex Cloud Container Registry
        env:
            CR_REGISTRY: crps1qcig864jjaaej54
            CR_REPO: comp-tracker
            IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f ./compose/production/django/Dockerfile -t cr.yandex/$CR_REGISTRY/$CR_REPO:$IMAGE_TAG .
          docker push cr.yandex/$CR_REGISTRY/$CR_REPO:$IMAGE_TAG

  deploy-job: # deploy job is for deploying code to yandex cloud
    runs-on: ubuntu-latest
    needs: [package-job] # will be fired if and only if package-job-job is passed.
    if: ${{ github.event_name == 'push' }} # will be fire if the trigger event is a push event.
    steps:
      - name: Checkout code # checking our the code at current commit that triggers the workflow
        uses: actions/checkout@v2 # Runs a single command using the runners shell
      - name: Deploy COI VM
        id: deploy-coi
        uses: yc-actions/yc-coi-deploy@v1
        env:
          IMAGE_URL: cr.yandex/crps1qcig864jjaaej54/comp-tracker:${{ github.sha }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          YC_VM_USERNAME: ${{ secrets.YC_VM_USERNAME }}
          TG_BOT_API_KEY:  ${{ secrets.TG_BOT_API_KEY }}
          CELERY_BROKER:  ${{ secrets.CELERY_BROKER }}
          CELERY_BACKEND:  ${{ secrets.CELERY_BACKEND }}
        with:
          yc-sa-json-credentials: ${{ secrets.YC_SA_JSON_CREDENTIALS }}
          folder-id: b1gpla67gvi8287ckpmi
          vm-name: vm-comp-tracker
          vm-service-account-id: aje6v81608hnkf86p3o0
          vm-cores: 2
          vm-memory: 1 GB
          vm-core-fraction: 20
          vm-zone-id: ru-central1-b
          vm-subnet-id: e2l0rlubgosi1hbl7cdi
          user-data-path: './user-data.yaml'
          docker-compose-path: './docker-compose-prod.yml'
